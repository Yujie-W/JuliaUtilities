var documenterSearchIndex = {"docs":
[{"location":"TextIO/#TextIO","page":"TextIO","title":"TextIO","text":"","category":"section"},{"location":"TextIO/","page":"TextIO","title":"TextIO","text":"CurrentModule = TextIO","category":"page"},{"location":"TextIO/#CSV","page":"TextIO","title":"CSV","text":"","category":"section"},{"location":"TextIO/","page":"TextIO","title":"TextIO","text":"read_csv\nsave_csv!","category":"page"},{"location":"TextIO/#TextIO.read_csv","page":"TextIO","title":"TextIO.read_csv","text":"read_csv(file::String; skiprows::Int = 0)\n\nRead in the CSV file a data frame, given\n\nfile Path to CSV file\nskiprows Rows to skip\n\n\n\n\n\n","category":"function"},{"location":"TextIO/#TextIO.save_csv!","page":"TextIO","title":"TextIO.save_csv!","text":"save_csv!(df::DataFrame, file::String)\nsave_csv!(file::String, df::DataFrame)\n\nSave a data frame as a CSV file, given\n\ndf A DataFrame\nfile Path of the target CSV file\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#API","page":"PkgUtility","title":"API","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"CurrentModule = PkgUtility","category":"page"},{"location":"PkgUtility/#Artifacts","page":"PkgUtility","title":"Artifacts","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"deploy_artifact!","category":"page"},{"location":"PkgUtility/#PkgUtility.deploy_artifact!","page":"PkgUtility","title":"PkgUtility.deploy_artifact!","text":"What deploy_artifact! function does are\n\ndetermine if the artifact already exists in the art_toml file\nif true, skip the deployment\nif false\ncopy the file(s) to ~/.julia/artifacts/ARTIFACT_SHA/\ncompress the artifact file(s) to a .tar.gz file\ncalculate the hash value of the compressed tar.gz file\nbind the artifact file to the .toml file\n\nMethod for this deployment is\n\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_file::Vector{String}, art_tarf::String, art_urls::Vector{String}; new_file::Vector{String} = art_file)\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files\nart_file Vector of the source file names\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be uploaded (user need to upload the file manually)\nnew_file Optional. New file names of the copied files (same as art_file by default)\n\n\n\nExamples\n\n# deploy art_1.txt and art_2.txt as test_art artifact\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt], \"./\", [\"https://public.server.url\"]);\n\n# deploy art_1.txt and art_2.txt as test_art artifact with new names\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt], \"./\", [\"https://public.server.url\"]; new_files=[\"new_1.txt\", \"new_2.txt\"]);\n\nIn many cases, one might want to copy all the files in a folder to the target artifact, and iterate the file names is not convenient at all. Thus, a     readily usable method is provided for this purpose:\n\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_tarf::String, art_urls::Vector{String})\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files (all files will be copied into the artifact)\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be uploaded (user need to upload the file manually)\n\n\n\nExamples\n\n# deploy all files in target folder\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./folder\", \"./\", [\"https://public.server.url\"]);\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#DateTime","page":"PkgUtility","title":"DateTime","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"parse_timestamp\nmonth_days\nmonth_ind\nterror\ntinfo\ntwarn","category":"page"},{"location":"PkgUtility/#PkgUtility.parse_timestamp","page":"PkgUtility","title":"PkgUtility.parse_timestamp","text":"parse_timestamp(timestamp::Union{Int,String}; in_format::String = \"YYYYMMDD\", out_format::String = \"DOY\")\nparse_timestamp(year::Int, doy::Int; out_format::String = \"DOY\")\nparse_timestamp(year::Int, doy::AbstractFloat; out_format::String = \"DOY\")\n\nConvert timestamp, given\n\ntimestamp Time stamp\nin_format Format of timestamp, default is YYYYMMDD\nout_format Output format, default is DOY\nyear Year (in this case, the function will convert year and day to timestamp first)\ndoy Day of year (typically 1-365, 1-366 for leap years)\n\nThe input format (string or integer) supports YYYYMMDD, YYYYMMDDhh, YYYYMMDDhhmm, and YYYYMMDDhhmmss, where the labels are\n\nYYYY Year number\nMM Month number\nDD Day number\nhh Hour number\nmm Minute number\nss second number\n\nThe supported outputs are\n\nDATE A Dates.Date type variable\nDATETIME A Dates.DateTime type variable\nDOY A day of year integer\nFDOY A day of year float\n\n\n\nExamples\n\ntime = parse_timestamp(20200130; in_format=\"YYYYMMDD\", out_format=\"FDOY\");\ntime = parse_timestamp(\"20200130\"; in_format=\"YYYYMMDD\", out_format=\"FDOY\");\ntime = parse_timestamp(2020, 100);\ntime = parse_timestamp(2020, 100.23435436);\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.month_days","page":"PkgUtility","title":"PkgUtility.month_days","text":"month_days(year::Int, month::Int)\n\nReturn the number of days per month, given\n\nyear Year\nmonth Month\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.month_ind","page":"PkgUtility","title":"PkgUtility.month_ind","text":"month_ind(year::Int, doy::Int)\nmonth_ind(year::Int, doy::AbstractFloat)\n\nReturn the month index, given\n\nyear Year\ndoy Day of year (typically 1-365, 1-366 for leap years)\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.terror","page":"PkgUtility","title":"PkgUtility.terror","text":"terror(info::String)\n\nAdd a time tag to logging string, given\n\ninfo Infomation to display with @error\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.tinfo","page":"PkgUtility","title":"PkgUtility.tinfo","text":"tinfo(info::String)\n\nAdd a time tag to logging string, given\n\ninfo Infomation to display with @info\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.twarn","page":"PkgUtility","title":"PkgUtility.twarn","text":"twarn(info::String)\n\nAdd a time tag to logging string, given\n\ninfo Infomation to display with @warn\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#Display","page":"PkgUtility","title":"Display","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"pretty_display!","category":"page"},{"location":"PkgUtility/#PkgUtility.pretty_display!","page":"PkgUtility","title":"PkgUtility.pretty_display!","text":"pretty_display!(pvec::Union{Vector{Pair{String,String}}, Vector{Pair{String,Any}}, Vector{Pair{Any,String}}, Vector{Pair{Any,Any}}}, spaces::String = \"    \")\n\nDisplay the pairs in a pretty way, given\n\npvec Vector of pairs to display\nspaces Leading spaces before displaying the pair key\n\n\n\nExamples\n\n_pairs = [\"A\" => \"b\", \"d\" => \"A\", \"rr\" => [\"ra\" => \"rB\", \"rD\" => \"ra\"]];\npretty_display!(_pairs);\npretty_display!(_pairs, \"  \");\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#Email","page":"PkgUtility","title":"Email","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"send_email!","category":"page"},{"location":"PkgUtility/#PkgUtility.send_email!","page":"PkgUtility","title":"PkgUtility.send_email!","text":"send_email!(subject::String, from_email::String, to_email::String, body::String)\n\nSend out email, given\n\nsubject Email subject\nfrom_email The outgoing email address\nto_email Email address to send out\nbody Main body of the email\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#Recursive-tests","page":"PkgUtility","title":"Recursive tests","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"FT_test\nNaN_test","category":"page"},{"location":"PkgUtility/#PkgUtility.FT_test","page":"PkgUtility","title":"PkgUtility.FT_test","text":"FT_test(para::Array, FT)\nFT_test(para::Number, FT)\nFT_test(para::Union{Function, Module, String, Symbol}, FT)\nFT_test(para::Any, FT)\n\nReturn true or false to determine if the FT is consistent, given\n\npara Parameter to run FT control\nFT Float type\n\nIf the testing variable is an array, the function will test if element type is float number:\n\nIf true, the function tests if the element type is the same as given FT\nIf false, the function tests each element recursively\n\nThe variable to test maybe a struct, but FT_test does not know the struct type name a priori. Thus, we try to read out the fields of the variable:\n\nIf succeeds, the function test the fields recursively\nIf fails, then do nothing\n\n\n\nExample\n\nstruct SA\n    a\n    b\nend\nsa = SA(1, 2.0);\n\nft_1 = FT_test([1, 2, 3], Float64);\nft_2 = FT_test(Any[1, 1.0f0, 1.0e0], Float64);\nft_3 = FT_test([1, 2.0, \"a\"], Float64);\nft_4 = FT_test(sa, Float64);\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.NaN_test","page":"PkgUtility","title":"PkgUtility.NaN_test","text":"Like FT_test, same logic is used to test if all the elements within the tested variable are not NaN:\n\nNaN_test(para::Array)\nNaN_test(para::Number)\nNaN_test(para::Union{Function, Module, String, Symbol})\nNaN_test(para::Any)\n\nTest if the variable is not NaN, given\n\npara Parameter to test\n\n\n\nExample\n\nstruct SA\n    a\n    b\nend\n\nnan_1 = NaN_test(SA(1,2));\nnan_2 = NaN_test(SA(1,NaN));\nnan_3 = NaN_test([1,2,NaN]);\nnan_4 = NaN_test([1,3,4]);\nnan_5 = NaN_test([1,2,\"a\"]);\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#Numerical-methods","page":"PkgUtility","title":"Numerical methods","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"numerical∫\nlower_quadratic\nupper_quadratic","category":"page"},{"location":"PkgUtility/#PkgUtility.numerical∫","page":"PkgUtility","title":"PkgUtility.numerical∫","text":"numerical∫(f::Vector{FT}, Δx::Vector{FT}) where {FT<:AbstractFloat}\nnumerical∫(f::Vector{FT}, Δx::FT) where {FT<:AbstractFloat}\n\nReturn the intergal of given\n\nf f(x) for each x\nΔx Δx for x\nnumerical∫(f::Function, xmin::FT, xmax::FT, n::Int) where {FT<:AbstractFloat}   numerical∫(f::Function, xmin::FT, xmax::FT, xtol::FT = sqrt(eps(FT)), ytol::FT = sqrt(eps(FT))) where {FT<:AbstractFloat}\n\nReturn the integral of given\n\nf A function\nx_min Minimum limit of x\nx_max Maximum limit of x\nn Number of points in the x range (evenly stepped)\nx_tol Tolerance of Δx (x/N)\ny_tol Tolerance of the integral solution\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.lower_quadratic","page":"PkgUtility","title":"PkgUtility.lower_quadratic","text":"lower_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the lower quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.upper_quadratic","page":"PkgUtility","title":"PkgUtility.upper_quadratic","text":"upper_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the upper quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#Statistics","page":"PkgUtility","title":"Statistics","text":"","category":"section"},{"location":"PkgUtility/","page":"PkgUtility","title":"PkgUtility","text":"nanmax\nnanmean\nnanmedian\nnanmin\nnanpercentile\nnanstd\nmae\nmape\nmase\nrmse","category":"page"},{"location":"PkgUtility/#PkgUtility.nanmax","page":"PkgUtility","title":"PkgUtility.nanmax","text":"nanmax(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.nanmean","page":"PkgUtility","title":"PkgUtility.nanmean","text":"nanmean(x::Array)\n\nReturn the mean of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.nanmedian","page":"PkgUtility","title":"PkgUtility.nanmedian","text":"nanmedian(x::Array)\n\nReturn the median of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.nanmin","page":"PkgUtility","title":"PkgUtility.nanmin","text":"nanmin(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.nanpercentile","page":"PkgUtility","title":"PkgUtility.nanpercentile","text":"nanpercentile(x::Array, p::Number)\n\nReturn the percentile by excluding the NaN of given\n\nx Array of data\np Percentile in [%]\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.nanstd","page":"PkgUtility","title":"PkgUtility.nanstd","text":"nanstd(x::Array)\n\nReturn the std of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n```\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.mae","page":"PkgUtility","title":"PkgUtility.mae","text":"mae(y::Array, pred::Array)\n\nReturn the mean absolute error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.mape","page":"PkgUtility","title":"PkgUtility.mape","text":"mape(y::Array, pred::Array)\n\nReturn the mean absolute percentage error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.mase","page":"PkgUtility","title":"PkgUtility.mase","text":"mase(y::Array, pred::Array)\n\nReturn the mean absolute standardized error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"PkgUtility/#PkgUtility.rmse","page":"PkgUtility","title":"PkgUtility.rmse","text":"rmse(y::Array, pred::Array)\n\nReturn the root mean square error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#API","page":"NetcdfIO","title":"API","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"CurrentModule = NetcdfIO","category":"page"},{"location":"NetcdfIO/#Create-netcdf-file","page":"NetcdfIO","title":"Create netcdf file","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"create_nc!\ncreate_nc!(file::String)\ncreate_nc!(file::String, dim_names::Vector{String}, dim_sizes::Vector)\nadd_nc_dim!\nadd_nc_dim!(ds::Dataset, dim_name::String, dim_size::Int)\nadd_nc_dim!(ds::Dataset, dim_name::String, dim_size::AbstractFloat)\nadd_nc_dim!(file::String, dim_name::String, dim_size::Union{Int, AbstractFloat})","category":"page"},{"location":"NetcdfIO/#NetcdfIO.create_nc!","page":"NetcdfIO","title":"NetcdfIO.create_nc!","text":"This function creates a netcdf file, and the supported methods are\n\ncreate_nc!(file)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/create.jl:40.\n\ncreate_nc!(file, dim_names, dim_sizes)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/create.jl:81.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.create_nc!-Tuple{String}","page":"NetcdfIO","title":"NetcdfIO.create_nc!","text":"create_nc!(file::String)\n\nCreate an empty netcdf file, given\n\nfile Path to save the netcdf dataset\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\");\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.create_nc!-Tuple{String, Vector{String}, Vector}","page":"NetcdfIO","title":"NetcdfIO.create_nc!","text":"create_nc!(file::String, dim_names::Vector{String}, dim_sizes::Vector)\n\nCreate an empty netcdf file with dimensions, given\n\nfile Path to save the netcdf dataset\ndim_names Dimension names in the netcdf file\ndim_sizes Sizes of the dimensions (must be Integer or Inf), the dimension is growable if size is Integer 0\n\n\n\nExamples\n\ncreate_nc!(\"test1.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ncreate_nc!(\"test2.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, Inf]);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.add_nc_dim!","page":"NetcdfIO","title":"NetcdfIO.add_nc_dim!","text":"This function adds dim name and size information to netcdf file, and the supported methods are\n\nadd_nc_dim!(ds, dim_name, dim_size)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/create.jl:142.\n\nadd_nc_dim!(ds, dim_name, dim_size)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/create.jl:183.\n\nadd_nc_dim!(file, dim_name, dim_size)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/create.jl:215.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.add_nc_dim!-Tuple{NCDatasets.NCDataset, String, Int64}","page":"NetcdfIO","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(ds::Dataset, dim_name::String, dim_size::Int)\n\nAdd dimension information to netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\ndim_name Dimension name\ndim_size Integer dimension size (0 for Inf, growable)\n\n\n\nExamples\n\nds = Dataset(\"test.nc\", \"a\");\nadd_nc_dim!(ds, \"lat\", 180);\nadd_nc_dim!(ds, \"ind\", 0);\nclose(ds);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.add_nc_dim!-Tuple{NCDatasets.NCDataset, String, AbstractFloat}","page":"NetcdfIO","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(ds::Dataset, dim_name::String, dim_size::AbstractFloat)\n\nAdd dimension information to netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\ndim_name Dimension name\ndim_size Float dimension size, can be Inf\n\n\n\nExamples\n\nds = Dataset(\"test.nc\", \"a\");\nadd_nc_dim!(\"test.nc\", \"ind\", Inf);\nclose(ds);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.add_nc_dim!-Tuple{String, String, Union{Int64, AbstractFloat}}","page":"NetcdfIO","title":"NetcdfIO.add_nc_dim!","text":"add_nc_dim!(file::String, dim_name::String, dim_size::Union{Int, AbstractFloat})\n\nAdd dimension information to netcdf file, given\n\nfile Path of the netcdf dataset\ndim_name Dimension name\ndim_size Dimension size, must be Inf or Integer\n\n\n\nExamples\n\nadd_nc_dim!(\"test.nc\", \"lat\", 180);\nadd_nc_dim!(\"test.nc\", \"ind\", Inf);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#Append-new-variables","page":"NetcdfIO","title":"Append new variables","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"append_nc!\nappend_nc!(ds::Dataset, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\nappend_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}","category":"page"},{"location":"NetcdfIO/#NetcdfIO.append_nc!","page":"NetcdfIO","title":"NetcdfIO.append_nc!","text":"NCDatasets.jl does not have a convenient function (1 line command) to append or grow dataset into a file. Thus, we provide a few methods as supplements:\n\nappend_nc!(\n    ds,\n    var_name,\n    var_data,\n    var_attributes,\n    dim_names;\n    compress\n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/append.jl:53.\n\nappend_nc!(\n    file,\n    var_name,\n    var_data,\n    var_attributes,\n    dim_names;\n    compress\n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/append.jl:103.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.append_nc!-Union{Tuple{N}, Tuple{T}, Tuple{NCDatasets.NCDataset, String, Array{T, N}, Dict{String, String}, Vector{String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"NetcdfIO","title":"NetcdfIO.append_nc!","text":"append_nc!(ds::Dataset, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\n\nAppend data to existing netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\nvar_name New variable name to write to\nvar_data New variable data to write, can be integer, float, and string with N dimens\nvar_attributes New variable attributes\ndim_names Dimension names in the netcdf file\ncompress Compression level fro NetCDF, default is 4\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 5]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"str\", [\"A\" for i in 1:18], Dict(\"longname\" => \"test strings\"), [\"lat\"]);\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.append_nc!-Union{Tuple{N}, Tuple{T}, Tuple{String, String, Array{T, N}, Dict{String, String}, Vector{String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"NetcdfIO","title":"NetcdfIO.append_nc!","text":"append_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attributes::Dict{String,String}, dim_names::Vector{String}; compress::Int = 4) where {T<:Union{AbstractFloat,Int,String},N}\n\nAppend data to existing netcdf dataset, given\n\nfile Path of the netcdf dataset\nvar_name New variable name to write to\nvar_data New variable data to write, can be integer, float, and string with N dimens\nvar_attributes New variable attributes\ndim_names Dimension names in the netcdf file\ncompress Compression level fro NetCDF, default is 4\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 5]);\nappend_nc!(\"test.nc\", \"str\", [\"A\" for i in 1:18], Dict(\"longname\" => \"test strings\"), [\"lat\"]);\nappend_nc!(\"test.nc\", \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(\"test.nc\", \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(\"test.nc\", \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(\"test.nc\", \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(\"test.nc\", \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#Grow-existing-variables","page":"NetcdfIO","title":"Grow existing variables","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"grow_nc!\ngrow_nc!(ds::Dataset, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\ngrow_nc!(file::String, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)","category":"page"},{"location":"NetcdfIO/#NetcdfIO.grow_nc!","page":"NetcdfIO","title":"NetcdfIO.grow_nc!","text":"This function grows variables within a netcdf file, and the supported methods are\n\ngrow_nc!(ds, var_name, in_data, pending)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/grow.jl:55.\n\ngrow_nc!(file, var_name, in_data, pending)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/grow.jl:132.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.grow_nc!-Tuple{NCDatasets.NCDataset, String, Union{Int64, AbstractFloat, String, Array}, Bool}","page":"NetcdfIO","title":"NetcdfIO.grow_nc!","text":"grow_nc!(ds::Dataset, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\n\nGrow the netcdf dataset, given\n\nds A NCDatasets.Dataset type dataset\nvar_name New variable name to write to\nin_data New data to grow, can be integer, float, and string with N dimens\npending If true, the new data is appened to the end (growth); if false, the data will replace the ones from the bottom (when dimension has already growed)\n\nNote that if there are more variables to grow at the same time, set pending to true only for the first time you call this function, and set pending to false for the rest variables.\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\ngrow_nc!(dset, \"ind\", 6, true);\ngrow_nc!(dset, \"d3d\", rand(36,18), false);\ngrow_nc!(dset, \"d3d\", rand(36,18), true);\ngrow_nc!(dset, \"ind\", 7, false);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.grow_nc!-Tuple{String, String, Union{Int64, AbstractFloat, String, Array}, Bool}","page":"NetcdfIO","title":"NetcdfIO.grow_nc!","text":"grow_nc!(file::String, var_name::String, in_data::Union{AbstractFloat,Array,Int,String}, pending::Bool)\n\nGrow the netcdf dataset, given\n\nfile Path of the netcdf dataset\nvar_name New variable name to write to\nin_data New data to grow, can be integer, float, and string with N dimens\npending If true, the new data is appened to the end (growth); if false, the data will replace the ones from the bottom (when dimension has already growed)\n\nNote that if there are more variables to grow at the same time, set pending to true only for the first time you call this function, and set pending to false for the rest variables.\n\n\n\nExamples\n\ncreate_nc!(\"test.nc\", String[\"lon\", \"lat\", \"ind\"], [36, 18, 0]);\ndset = Dataset(\"test.nc\", \"a\");\nappend_nc!(dset, \"lat\", collect(1:18), Dict(\"longname\" => \"latitude\"), [\"lat\"]);\nappend_nc!(dset, \"lon\", collect(1:36), Dict(\"longname\" => \"longitude\"), [\"lon\"]; compress=4);\nappend_nc!(dset, \"ind\", collect(1:5), Dict(\"longname\" => \"index\"), [\"ind\"]);\nappend_nc!(dset, \"d2d\", rand(36,18), Dict(\"longname\" => \"a 2d dataset\"), [\"lon\", \"lat\"]);\nappend_nc!(dset, \"d3d\", rand(36,18,5), Dict(\"longname\" => \"a 3d dataset\"), [\"lon\", \"lat\", \"ind\"]);\nclose(dset);\ngrow_nc!(\"test.nc\", \"ind\", 6, true);\ngrow_nc!(\"test.nc\", \"d3d\", rand(36,18), false);\ngrow_nc!(\"test.nc\", \"d3d\", rand(36,18), true);\ngrow_nc!(\"test.nc\", \"ind\", 7, false);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#Information-of-the-dataset","page":"NetcdfIO","title":"Information of the dataset","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"dimname_nc\nvarname_nc\nvarname_nc(file::String)\nvarname_nc(ds::Dataset)\nsize_nc","category":"page"},{"location":"NetcdfIO/#NetcdfIO.dimname_nc","page":"NetcdfIO","title":"NetcdfIO.dimname_nc","text":"dimname_nc(file::String)\n\nReturn all the names of the dimensions, given\n\nfile Path of the netcdf dataset\n\n\n\nExamples\n\ndims = dimname_nc(\"test.nc\");\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.varname_nc","page":"NetcdfIO","title":"NetcdfIO.varname_nc","text":"This function returns the variable names in the netcdf dataset, and the supported methids are\n\nvarname_nc(file)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/info.jl:69.\n\nvarname_nc(ds)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/info.jl:100.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.varname_nc-Tuple{String}","page":"NetcdfIO","title":"NetcdfIO.varname_nc","text":"varname_nc(file::String)\n\nReturn all the names of the variables (excluding the dimensions), given\n\nfile Path of the netcdf dataset\n\n\n\nExamples\n\nvars = varname_nc(\"test.nc\");\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.varname_nc-Tuple{NCDatasets.NCDataset}","page":"NetcdfIO","title":"NetcdfIO.varname_nc","text":"varname_nc(ds::Dataset)\n\nReturn all the names of the variables (excluding the dimensions), given\n\nds NCDatasets.Dataset type dataset\n\n\n\nExamples\n\ndset = Dataset(\"test.nc\");\nvars = varname_nc(dset);\nclose(dset);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.size_nc","page":"NetcdfIO","title":"NetcdfIO.size_nc","text":"size_nc(file::String, var_name::String)\n\nReturn the dimensions and size of a NetCDF dataset, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\n\n\n\nExamples\n\nndims,sizes = size_nc(\"test.nc\", \"test\");\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#Read-existing-variables","page":"NetcdfIO","title":"Read existing variables","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"find_variable\nread_nc\nread_nc(file::String, var_name::String; transform::Bool = true)\nread_nc(T, file::String, var_name::String; transform::Bool = true)\nread_nc(file::String, var_name::String, indz::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indz::Int; transform::Bool = true)\nread_nc(file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\nread_nc(file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\nread_nc(file::String, selections::Vector{String} = varname_nc(file); transform::Bool = true)","category":"page"},{"location":"NetcdfIO/#NetcdfIO.find_variable","page":"NetcdfIO","title":"NetcdfIO.find_variable","text":"find_variable(ds::Dataset, var_name::String)\n\nReturn the path to dataset if it exists, given\n\nds NCDatasets.Dataset type dataset\nvar_name Variable to read\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.read_nc","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"NCDatasets.jl and NetCDF.jl both provide function to read data out from NC dataset. However, while NetCDF.jl is more convenient to use (less lines of code to read data), NCDatasets.jl is better to     read a subset from the dataset and is able to detect the scale factor and offset. Here, we used a wrapper function to read NC dataset using NCDatasets.jl:\n\nread_nc(file, var_name; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:86.\n\nread_nc(T, file, var_name; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:138.\n\nread_nc(file, var_name, indz; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:176.\n\nread_nc(T, file, var_name, indz; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:226.\n\nread_nc(file, var_name, indx, indy; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:263.\n\nread_nc(T, file, var_name, indx, indy; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:315.\n\nread_nc(file, var_name, indx, indy, indz; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:351.\n\nread_nc(T, file, var_name, indx, indy, indz; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:397.\n\nread_nc(file)\nread_nc(file, selections; transform)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/read.jl:433.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{String, String}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"When only file name and variable label are provided, read_nc function reads out all the data:\n\nread_nc(file::String, var_name::String; transform::Bool = true)\n\nRead data from NC file, given\n\nfile Path of the netcdf dataset\nvar_name Variable to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\nNote that the missing data will be labeled as NaN.\n\n\n\nExamples\n\n# read data labeled as test from test.nc\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\");\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{Any, String, String}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"If a float type is given, the data will be converted to T, namely the output will be an array of T type numbers:\n\nread_nc(T, file::String, var_name::String; transform::Bool = true)\n\nRead data from nc file, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\n# read data labeled as test from test.nc as Float32\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\");\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{String, String, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"In many cases, the NC dataset can be very huge, and reading all the data points into one array could be time and memory consuming. In this case, reading a subset of data would be the best option:\n\nread_nc(file::String, var_name::String, indz::Int; transform::Bool = true)\n\nRead a subset from nc file, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindz The 3rd index of subset data to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\nNote that the dataset must be a 3D array to use this method.\n\n\n\nExamples\n\n# read 1st layer data labeled as test from test.nc\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\", 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the subset as a certain type using\n\nread_nc(T, file::String, var_name::String, indz::Int; transform::Bool = true)\n\nRead a subset from nc file, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindz The 3rd index of subset data to read\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\n# read 1st layer data labeled as test from test.nc as Float32\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\", 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{String, String, Int64, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"Another convenient wrapper is to read all the data for given index in x and y, for example, if one wants to read the time series of data at a given site:\n\nread_nc(file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test1.nc\", \"test\", rand(36,18), Dict(\"description\" => \"Random randoms\"));\nsave_nc!(\"test2.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata1 = read_nc(\"test1.nc\", \"test\", 1, 1);\ndata2 = read_nc(\"test2.nc\", \"test\", 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the subset as a certain type using\n\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test1.nc\", \"test\", rand(36,18), Dict(\"description\" => \"Random randoms\"));\nsave_nc!(\"test2.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata1 = read_nc(Float32, \"test1.nc\", \"test\", 1, 1);\ndata2 = read_nc(Float32, \"test2.nc\", \"test\", 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{String, String, Int64, Int64, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"Another convenient wrapper is to read the data for given index in x, y, and z, for example, if one wants to read the time series of data at a given site:\n\nread_nc(file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\nindz The 3rd index of subset data to read, typically time\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(\"test.nc\", \"test\", 1, 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-Tuple{Any, String, String, Int64, Int64, Int64}","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"Similarly, one may want to read the data as a certain type using\n\nread_nc(T, file::String, var_name::String, indx::Int, indy::Int, indz::Int; transform::Bool = true)\n\nRead the time series of data for a site, given\n\nT Number type\nfile Path of the netcdf dataset\nvar_name Variable name\nindx The 1st index of subset data to read, typically longitude\nindy The 2nd index of subset data to read, typically latitude\nindz The 3rd index of subset data to read, typically time\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\nsave_nc!(\"test.nc\", \"test\", rand(36,18,12), Dict(\"description\" => \"Random randoms\"));\ndata = read_nc(Float32, \"test.nc\", \"test\", 1, 1, 1);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.read_nc-2","page":"NetcdfIO","title":"NetcdfIO.read_nc","text":"The method below reads all the 1D data (with the same length) into a DataFrame\n\nread_nc(file::String, selections::Vector{String} = varname_nc(file); transform::Bool = true)\n\nRead the selected variables from a netcdf file as a DataFrame, given\n\nfile Path of the netcdf dataset\nselections Variables to read from the file\ntransform If true, transform the data using NCDatasets rules, otherwise read the raw data\n\n\n\nExamples\n\ndf_raw = DataFrame();\ndf_raw[!,\"A\"] = rand(5);\ndf_raw[!,\"B\"] = rand(5);\ndf_raw[!,\"C\"] = rand(5);\nsave_nc!(\"test.nc\", df_raw);\ndf_new = read_nc(\"test.nc\");\ndf_new = read_nc(\"test.nc\", [\"A\", \"B\"]);\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#Quick-save","page":"NetcdfIO","title":"Quick save","text":"","category":"section"},{"location":"NetcdfIO/","page":"NetcdfIO","title":"NetcdfIO","text":"save_nc!\nsave_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attribute::Dict{String,String}; compress::Int = 4, growable::Bool = false) where {T<:Union{AbstractFloat,Int,String},N}\nsave_nc!(file::String, df::DataFrame, var_names::Vector{String}, var_attributes::Vector{Dict{String,String}}; compress::Int = 4, growable::Bool = false)\nsave_nc!(file::String, df::DataFrame; compress::Int = 4, growable::Bool = false)","category":"page"},{"location":"NetcdfIO/#NetcdfIO.save_nc!","page":"NetcdfIO","title":"NetcdfIO.save_nc!","text":"NCDatasets.jl does not have a convenient function (1 line command) to save dataset as a file. Thus, we provide a few methods as supplements:\n\nsave_nc!(\n    file,\n    var_name,\n    var_data,\n    var_attribute;\n    compress,\n    growable\n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/save.jl:46.\n\nsave_nc!(\n    file,\n    df,\n    var_names,\n    var_attributes;\n    compress,\n    growable\n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/save.jl:122.\n\nsave_nc!(file, df; compress, growable)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/NetcdfIO.jl/src/save.jl:173.\n\n\n\n\n\n","category":"function"},{"location":"NetcdfIO/#NetcdfIO.save_nc!-Union{Tuple{N}, Tuple{T}, Tuple{String, String, Array{T, N}, Dict{String, String}}} where {T<:Union{Int64, AbstractFloat, String}, N}","page":"NetcdfIO","title":"NetcdfIO.save_nc!","text":"To save the code and effort to redefine the common attributes like latitude, longitude, and cycle index, we provide a shortcut method that handles these within the function:\n\nsave_nc!(file::String, var_name::String, var_data::Array{T,N}, var_attribute::Dict{String,String}; compress::Int = 4, growable::Bool = false) where {T<:Union{AbstractFloat,Int,String},N}\n\nSave the 1D, 2D, or 3D data as netcdf file, given\n\nfile Path to save the dataset\nvar_name Variable name for the data in the NC file\nvar_data Data to save\nvar_attribute Variable attributes for the data, such as unit and long name\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\n# generate data to write into NC file\ndata1 = rand(12) .+ 273.15;\ndata2 = rand(36,18) .+ 273.15;\ndata3 = rand(36,18,12) .+ 273.15;\n\n# save data as NC files (2D and 3D)\nsave_nc!(\"data1.nc\", \"data1\", data1, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\nsave_nc!(\"data2.nc\", \"data2\", data2, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\nsave_nc!(\"data3.nc\", \"data3\", data3, Dict(\"description\" => \"Random temperature\", \"unit\" => \"K\"));\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.save_nc!-Tuple{String, DataFrames.DataFrame, Vector{String}, Vector{Dict{String, String}}}","page":"NetcdfIO","title":"NetcdfIO.save_nc!","text":"This method saves DataFrame as a NetCDF file to save more space (compared to a CSV file).\n\nsave_nc!(file::String, df::DataFrame, var_names::Vector{String}, var_attributes::Vector{Dict{String,String}}; compress::Int = 4, growable::Bool = false)\n\nSave DataFrame to NetCDF, given\n\nfile Path to save the data\ndf DataFrame to save\nvar_names The label of data in DataFrame to save\nvar_attributes Variable attributes for the data to save\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\ndf = DataFrame();\ndf[!,\"A\"] = rand(5);\ndf[!,\"B\"] = rand(5);\ndf[!,\"C\"] = rand(5);\nsave_nc!(\"dataf.nc\", df, [\"A\",\"B\"], [Dict(\"A\" => \"Attribute A\"), Dict(\"B\" => \"Attribute B\")]);\n\n\n\n\n\n","category":"method"},{"location":"NetcdfIO/#NetcdfIO.save_nc!-Tuple{String, DataFrames.DataFrame}","page":"NetcdfIO","title":"NetcdfIO.save_nc!","text":"This method is a simplified version of the method above, namely when users do not want to define the attributes.\n\nsave_nc!(file::String, df::DataFrame; compress::Int = 4, growable::Bool = false)\n\nSave DataFrame to NetCDF, given\n\nfile Path to save the data\ndf DataFrame to save\nnotes Global attributes (notes)\ncompress Compression level fro NetCDF, default is 4\ngrowable If true, make index growable, default is false\n\n\n\nExamples\n\ndf = DataFrame();\ndf[!,\"A\"] = rand(5);\ndf[!,\"B\"] = rand(5);\ndf[!,\"C\"] = rand(5);\nsave_nc!(\"test.nc\", df);\n\n\n\n\n\n","category":"method"},{"location":"PlotPlants/#PlotPlants","page":"PlotPlants","title":"PlotPlants","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"CurrentModule = PlotPlants","category":"page"},{"location":"PlotPlants/#Usage","page":"PlotPlants","title":"Usage","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"using PlotPlants\n\n# use all the functions in the project\nuse_serif_tex();\nfig,axs = create_canvas(\"1\"; ncol=2, nrow=2, axids=[1,3,4]);\nset_titles!(axs);","category":"page"},{"location":"PlotPlants/#Set-global-font","page":"PlotPlants","title":"Set global font","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"The PyPlot package of Julia uses sans font by default, by my favorite font is     serif type. Also, some fonts do not have normal greek letters in their     library, like the Times only have italic greek letters. To change the     default font to serif and use normal greek letters, the PlotPlants package     provides a use_serif_tex function, which use LaTeX amsmath and     upgreek packages. Also, sans-serif font and normal text render are also     supported.","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"use_sans\nuse_sans_tex\nuse_sans_text\nuse_serif\nuse_serif_tex\nuse_serif_text","category":"page"},{"location":"PlotPlants/#PlotPlants.use_sans","page":"PlotPlants","title":"PlotPlants.use_sans","text":"use_sans()\n\nSet default font to sans-serif\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.use_sans_tex","page":"PlotPlants","title":"PlotPlants.use_sans_tex","text":"use_sans_tex()\n\nSet default font to sans and use latex wrapper for texts\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.use_sans_text","page":"PlotPlants","title":"PlotPlants.use_sans_text","text":"use_sans_text()\n\nSet default font to sans and use normal text wrapper for texts\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.use_serif","page":"PlotPlants","title":"PlotPlants.use_serif","text":"use_serif()\n\nSet default font to serif\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.use_serif_tex","page":"PlotPlants","title":"PlotPlants.use_serif_tex","text":"use_serif_tex()\n\nSet default font to serif and use latex wrapper for texts\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.use_serif_text","page":"PlotPlants","title":"PlotPlants.use_serif_text","text":"use_serif_text()\n\nSet default font to serif and use normal text wrapper for texts\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Symbols-and-units","page":"PlotPlants","title":"Symbols and units","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"To facilitate the use of LaTeX packages, functions latex_symbol and     latex_unit are provided to rapidly generate equation symbols and     units. By default,","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"if the number of letters is one, the letter will be set to italic, otherwise,   the letters will be normal (not italic);\nif the letter is greek, the letter will be normal;\nall sub- and super-scripts are normal;","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"latex_symbol\nlatex_unit\nparse_symbol\nsubscript\nsuperscript","category":"page"},{"location":"PlotPlants/#PlotPlants.latex_symbol","page":"PlotPlants","title":"PlotPlants.latex_symbol","text":"latex_symbol(\n            mid::String;\n            sub::String = \"\",\n            sup::String = \"\",\n            presub::String = \"\",\n            presup::String = \"\",\n            option::String = \"mathrm\"\n)\n\nReturn the latex symbol string, given\n\nmid Center symbol, italic only when length>1\nsub Optional: subscript after the mid\nsup Optional: supscript after the mid\npresub Optional: subscript before the mid\npresup Optional: supscript before the mid\noption Optional: choose from text and mathrm (default)\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.latex_unit","page":"PlotPlants","title":"PlotPlants.latex_unit","text":"latex_unit(id::String;\n           paren::Bool = true,\n           squared::Bool = false,\n           space::Bool = true,\n           unicode::Bool = false\n)\n\nReturn the unit, given\n\nid Identifier of the unit (if not in libary, use id as unit)\nparen Optional: if true, include parenthesis\nsquared Optional: if true, use [], otherwise, use ()\nspace Optional: if true, add a SPACE at the beginning\nunicode Optional. If true, return unicode; otherwise, return upgreek string\n\nThe predefined units include\n\nA μmol CO₂ m⁻² s⁻¹\nE mol H₂O m⁻² s⁻¹\nE_MMOL mmol H₂O m⁻² s⁻¹\nG mol m⁻² s⁻¹\nPAR μmol m⁻² s⁻¹\nT °C\nWUE μmol mol⁻¹\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.parse_symbol","page":"PlotPlants","title":"PlotPlants.parse_symbol","text":"parse_symbol(letter::String, unicode::Bool=false)\n\nReturn the unicode or latex string, given\n\nid Identifier for the greek letter, e.g., \"alpha\"\nunicode Optional. If true, return unicode; otherwise, return upgreek string\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.subscript","page":"PlotPlants","title":"PlotPlants.subscript","text":"subscript(ss::Number; option=\"mathrm\", standalone=true)\nsubscript(ss::String; option=\"mathrm\", standalone=true)\n\nReturn a string of subscript, given\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.superscript","page":"PlotPlants","title":"PlotPlants.superscript","text":"superscript(ss::Number; option=\"mathrm\", standalone=true)\nsuperscript(ss::String; option=\"mathrm\", standalone=true)\n\nReturn a string of superscript, given\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Create-and-save-canvas","page":"PlotPlants","title":"Create and save canvas","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"An customized funtion create_canvas is provided to genrate figure and     an array of axis from a few keywords. For example,","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"create_canvas(fig_id) returns a figure with one axis;\ncreate_canvas(fig_id, nrow=2, ncol=2) returns a figure will four subplots;\ncreate_canvas(fig_id, nrow=2, ncol=2, axs=[1,2,4]) returns a figure with   three subplot (the left bottom panel is empty);","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"create_canvas\nsave_canvas!\nsave_gif!","category":"page"},{"location":"PlotPlants/#PlotPlants.create_canvas","page":"PlotPlants","title":"PlotPlants.create_canvas","text":"create_canvas(\n            id::Union{Int,String};\n            ncol::Int = 1,\n            nrow::Int = 1,\n            axids::Array{Int,1} = Int[],\n            figsize::Tuple{Number,Number} = (0.5+ncol*3, 0.5+nrow*3),\n            dpi::Number = 100\n)\n\nCreate a canvas, given\n\nid ID of the figure\nncol Number of columns in the figure\nnrow Number of rows in the figure\naxids Given indicies of the subplots in the figure\nfigsize Given canvas size\ndpi Given pixels per inch\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.save_canvas!","page":"PlotPlants","title":"PlotPlants.save_canvas!","text":"save_canvas!(fig::Figure, path::String, saving::Bool = false)\n\nSave a canvas, given\n\nfig Canvas to save\npath Path to save the figure\nsaving Optional. If true, save the figure\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.save_gif!","page":"PlotPlants","title":"PlotPlants.save_gif!","text":"save_gif!(figs::Array, fps::Int, gif::String)\nsave_gif!(imgs::Array{Array,1}, fps::Int, fn::String)\n\nSave an array of figures as GIF, given\n\nfigs An array of figures\nfps Frame per second\nfn File name of the GIF to save\nimgs An array of array (loaded figures)\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Shapes","page":"PlotPlants","title":"Shapes","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"A few customized shapes can be added to the canvas very conveniently, for     example, stoma and ellipse. These shortcut functions include","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"plot_ellipse!\nplot_stoma!","category":"page"},{"location":"PlotPlants/#PlotPlants.plot_ellipse!","page":"PlotPlants","title":"PlotPlants.plot_ellipse!","text":"plot_ellipse!(\n            ax::PyObject,\n            xy::Tuple{Number,Number};\n            width::Number = 10,\n            height::Number = 10,\n            angle::Number = 0,\n            color::String = \"black\",\n            edgecolor::String = color,\n            facecolor::String = color,\n            alpha::Number = 0.5\n)\n\nPlot an ellipse on axis, given\n\nax Axis to plot on\nxy Center of the ellipse\nwidth Width of the ellipse\nheight Height of the ellipse\nangle Rotation angle of the ellipse\ncolor Color of the ellipse\nedgecolor Edgecolor of the ellipse\nfacecolor Face color of the ellipse\nalpha Transparency of the ellipse\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.plot_stoma!","page":"PlotPlants","title":"PlotPlants.plot_stoma!","text":"plot_stoma!(\n           ax::PyObject,\n           xy::Tuple{Number,Number};\n           width::Number = 10,\n           height::Number = 10,\n           stoma::Number = 0.2,\n           angle::Number = 0\n)\n\nPlot a stoma on the axis, given\n\nax Axis to plot on\nxy Center of the stoma\nwidth Width of the stoma\nheight Height of the stoma\nstoma Stomatal pore width ratio\nangle Rotation angle of the stoma\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Set-titles,-lims,-ticks,-and-ticklabels","page":"PlotPlants","title":"Set titles, lims, ticks, and ticklabels","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"Function set_titles! will add panel titles like (a) to all the     panels, and if labels options is given, the labels will be added after     the letter (e.g., (a) label).","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"set_titles!","category":"page"},{"location":"PlotPlants/#PlotPlants.set_titles!","page":"PlotPlants","title":"PlotPlants.set_titles!","text":"set_titles!(axs::Array;\n            labels::Array{String,1} = String[],\n            paren::Bool = true,\n            capital::Bool = false,\n            dotsep::Bool = false,\n            fontsize::Number = 16,\n            loc::String = \"center\",\n            usetex::Bool = true\n)\n\nSet titles for the axes, given\n\naxs An array of axis\nlabels Optional: labels after the panel title, e.g., (a) label\nparen Optional: if true, use format like (a)\ncapital Optional: if true, use capital letters like (A)\ndotsep Optional: if true, add a dot after the label like (a).\nfontsize Optional: fontsize of the title\nloc Optional: location of the title\nusetex Optional: use latex render\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"Similarly, the package provides shortcuts to set the X-axis and Y-axis labels,     limits, ticks, and tick labels.","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"set_xlabels!\nset_ylabels!\nset_xylabels!\nset_xlims!\nset_ylims!\nset_xylims!\nset_xticks!\nset_yticks!\nset_xyticks!\nset_xticklabels!\nset_yticklabels!\nset_xyticklabels!","category":"page"},{"location":"PlotPlants/#PlotPlants.set_xlabels!","page":"PlotPlants","title":"PlotPlants.set_xlabels!","text":"set_xlabels!(\n            axs::Array,\n            xlabels::Array{String,1};\n            fontsize::Number = 16\n)\nset_xlabels!(\n            axs::Array,\n            xlabels::String;\n            fontsize::Number = 16\n)\n\nSet X-axis labels for the axes, given\n\naxs An array of axis\nlabels X-axis labels\nfontsize Optional: fontsize of the label\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_ylabels!","page":"PlotPlants","title":"PlotPlants.set_ylabels!","text":"set_ylabels!(\n            axs::Array,\n            ylabels::Array{String,1};\n            fontsize::Number = 16\n)\nset_ylabels!(\n            axs::Array,\n            ylabels::String;\n            fontsize::Number = 16\n)\n\nSet Y-axis labels for the axes, given\n\naxs An array of axis\nlabels Y-axis labels\nfontsize Optional: fontsize of the label\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xylabels!","page":"PlotPlants","title":"PlotPlants.set_xylabels!","text":"set_xylabels!(\n            axs::Array,\n            xlabels::Union{Array{String,1},String},\n            ylabels::Union{Array{String,1},String};\n            fontsize::Number = 16\n)\n\nSet X-axis and Y-axis labels for the axes, given\n\naxs An array of axis\nxlabels X-axis labels\nylabels Y-axis labels\nfontsize Optional: fontsize of the label\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xlims!","page":"PlotPlants","title":"PlotPlants.set_xlims!","text":"set_xlims!(axs::Array, xlims::Array)\nset_xlims!(axs::Array,\n           xlims::Union{Array{Int,1},Array{Float32,1},Array{Float64,1}}\n)\n\nSet the X-axis limits, given\n\naxs Array of axis\nxlims Array of X-axis limits\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_ylims!","page":"PlotPlants","title":"PlotPlants.set_ylims!","text":"set_ylims!(axs::Array, ylims::Array)\nset_ylims!(axs::Array,\n           ylims::Union{Array{Int,1},Array{Float32,1},Array{Float64,1}}\n)\n\nSet the Y-axis limits, given\n\naxs Array of axis\nylims Array of Y-axis limits\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xylims!","page":"PlotPlants","title":"PlotPlants.set_xylims!","text":"set_xylims!(axs::Array, xlims::Array, ylims::Array)\n\nSet the X-axis limits, given\n\naxs Array of axis\nxlims Array of X-axis limits\nylims Array of Y-axis limits\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xticks!","page":"PlotPlants","title":"PlotPlants.set_xticks!","text":"set_xticks!(axs::Array, xticks::Array)\nset_xticks!(axs::Array,\n            xticks::Union{Array{Int,1},Array{Float32,1},Array{Float64,1}}\n)\n\nSet X-axis ticks for a given\n\naxs Array of axis\nxticks Array of X-axis ticks\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_yticks!","page":"PlotPlants","title":"PlotPlants.set_yticks!","text":"set_yticks!(axs::Array, yticks::Array)\nset_yticks!(axs::Array,\n            yticks::Union{Array{Int,1},Array{Float32,1},Array{Float64,1}}\n)\n\nSet Y-axis ticks for a given\n\naxs Array of axis\nyticks Array of Y-axis ticks\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xyticks!","page":"PlotPlants","title":"PlotPlants.set_xyticks!","text":"set_xyticks!(axs::Array, xticks::Array, yticks::Array)\n\nSet Y-axis ticks for a given\n\naxs Array of axis\nxticks Array of X-axis ticks\nyticks Array of Y-axis ticks\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xticklabels!","page":"PlotPlants","title":"PlotPlants.set_xticklabels!","text":"set_xticklabels!(axs::Array, xticklabs::Array)\nset_xticklabels!(axs::Array, xticklabs::Array{String,1})\n\nSet X-axis ticks for a given\n\naxs Array of axis\nxticklabs Array of X-axis tick labels\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_yticklabels!","page":"PlotPlants","title":"PlotPlants.set_yticklabels!","text":"set_yticklabels!(axs::Array, yticklabs::Array)\nset_yticklabels!(axs::Array, yticklabs::Array{String,1})\n\nSet Y-axis ticks for a given\n\naxs Array of axis\nyticklabs Array of Y-axis tick labels\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.set_xyticklabels!","page":"PlotPlants","title":"PlotPlants.set_xyticklabels!","text":"set_xyticklabels!(axs::Array, xticklabs::Array, yticklabs::Array)\n\nSet X-axis and Y-axis ticks for a given\n\naxs Array of axis\nxticklabs Array of X-axis tick labels\nyticklabs Array of Y-axis tick labels\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Add-regression","page":"PlotPlants","title":"Add regression","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"To quickly plot the regression lines, users may use","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"plot_line_regress!","category":"page"},{"location":"PlotPlants/#PlotPlants.plot_line_regress!","page":"PlotPlants","title":"PlotPlants.plot_line_regress!","text":"plot_line_regress!(\n            ax::PyObject,\n            xs::Array,\n            ys::Array;\n            linestyle::String = \"-\",\n            intercept::Bool = true,\n            interval::Bool = false,\n            color::String = \"red\",\n            alpha::Number = 0.3\n)\n\nPlor linear regression and confidence interval on the axis, given\n\nax Given axis\nxs Array of x\nys Array of y\nlinestyle Optional. Line style for the regression curve (\"-\" by default)\nintercept Optional: if true, fit the data with an intercept\ninterval Optional: if true, plot the confidence interval of fitted y\ncolor Color the fitted curve\nalpha Transparency of the confidence interval (same color as curve)\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"The function will filter out the NaN from the given data, make linear     regression using function line_regress, sort the results by the     value of x from low to high, store the results in a     LinearRegressionResult type struct, and plot the regression line     on the given axis. Also, if interval is set to true, the function will     also plot the confidence intervals of the predicted y.","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"linear_df_xy\nline_regress\nLinearRegressionResult","category":"page"},{"location":"PlotPlants/#PlotPlants.linear_df_xy","page":"PlotPlants","title":"PlotPlants.linear_df_xy","text":"linear_df_xy(df::DataFrame, intercept::Bool)\n\nLinear fit the X and Y in a given DataFrame, given\n\ndf DataFrame that use X and Y to store values\nintercept Whether using intercept when making the regression\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.line_regress","page":"PlotPlants","title":"PlotPlants.line_regress","text":"line_regress(\n            xs::Array,\n            ys::Array;\n            intercept::Bool = true,\n            sorting::Bool = true\n)\n\nMake linear regression and return the fitted results, given\n\nxs Array of x, can be NaN\nys Array of y, can be NaN\nintercept Optional: if true use intercept in the fitting\nsorting Optional: if true, sort the values\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.LinearRegressionResult","page":"PlotPlants","title":"PlotPlants.LinearRegressionResult","text":"mutable struct LinearRegressionResult\n\nFields\n\nlm::Any\n\n: Regression result\n\nr2::Number\n\n: Adjusted R square\n\ninter::Number\n\n: Intercept of fitting\n\nslope::Number\n\n: Slope of fitting\n\ninter_p::Number\n\n: P value of intercept\n\nslope_p::Number\n\n: P value of slopes\n\ninter_ci::Array\n\n: Confidence interval of intercept\n\nslope_ci::Array\n\n: Confidence interval of slopes\n\ndf::DataFrames.DataFrame\n\n: Predictions DataFrame\n\n\n\n\n\n","category":"type"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"Further, the PlotPlants module provides a quick tool to test whether the slope     differs from a given value, see","category":"page"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"test_slope","category":"page"},{"location":"PlotPlants/#PlotPlants.test_slope","page":"PlotPlants","title":"PlotPlants.test_slope","text":"test_slope(xs::Array,\n           ys::Array;\n           slope::Number = 0,\n           intercept::Bool = true\n)\n\nMake linear regression and return the p value of whether the regression slope     differs from the given slope, given\n\nxs Array of x, can be NaN\nys Array of y, can be NaN\nslope Slope to test\nintercept Optional: if true use intercept in the fitting\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Density-plot","page":"PlotPlants","title":"Density plot","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"calculate_density\nplot_density!\nplot_hexbin!","category":"page"},{"location":"PlotPlants/#PlotPlants.calculate_density","page":"PlotPlants","title":"PlotPlants.calculate_density","text":"calculate_density(xs::Array, ys::Array)\ncalculate_density(xs::Array, ys::Array, nthread::Int)\n\nPlot density plot on axis, given\n\nxs Array of X\nys Array of Y\nnthread Number of threads to run in parallel\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.plot_density!","page":"PlotPlants","title":"PlotPlants.plot_density!","text":"plot_density!(\n            ax::PyObject,\n            xs::Array,\n            ys::Array;\n            cmap::String = \"viridis\",\n            markersize::Number = 8,\n            dmax::Number = NaN\n)\nplot_density!(\n            ax::PyObject,\n            df::DataFrame;\n            cmap::String = \"viridis\",\n            markersize::Number = 8,\n            dmax::Number = NaN\n)\n\nPlot density plot on axis, given\n\nax Axis to plot on\nxs Array of X\nys Array of Y\ncmap Optional. Color map scheme\nmarkersize Optional. Marker size dimension, scatter size is markersize^2\ndmax Maximal density. If dmax is not NaN, use dmax as maximum density\ndf A dataframe with column names of (\"X\",\"Y\",\"C\")\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.plot_hexbin!","page":"PlotPlants","title":"PlotPlants.plot_hexbin!","text":"plot_hexbin!(\n            ax::PyObject,\n            xs::Array,\n            ys::Array;\n            cmap::String = \"Greys\",\n            logbins::Bool = false,\n            gridsize::Number = 25\n)\nplot_hexbin!(\n            ax::PyObject,\n            xs::Array,\n            ys::Array,\n            xlims::Array,\n            ylims::Array;\n            cmap::String = \"Greys\",\n            logbins::Bool = false,\n            gridsize::Number = 25\n)\n\nPlot density plot on axis, given\n\nax Axis to plot on\nxs Array of X\nys Array of Y\ncmap Optional. Color map scheme\nlogbins Optional. If true, use log(count) to color the bins\ngridsize Number of bins on both directions\nxlim Limits of x axis. Used to make plot region equal among subplots\nylim Limits of y axis. Used to make plot region equal among subplots\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#Preview-dataset","page":"PlotPlants","title":"Preview dataset","text":"","category":"section"},{"location":"PlotPlants/","page":"PlotPlants","title":"PlotPlants","text":"preview_data\npreview_dataset!\nAbstractFormat\nFormatNC\nFormatTIFF","category":"page"},{"location":"PlotPlants/#PlotPlants.preview_data","page":"PlotPlants","title":"PlotPlants.preview_data","text":"preview_data(\n            xs::Array,\n            ys::Array;\n            title = randstring(10),\n            figsize::Tuple{Number,Number} = (4,3),\n            xlab::String = \"X label\",\n            ylab::String = \"Y label\",\n            marker::String = \"\",\n            linestyle::String = \"-\",\n            label_fontsize::Int = 12\n)\n\nPreview data, given\n\nxs Array of x\nys Array of y\ntitle Axis titile\nfigsize Canvas size\nxlab X axis label\nylab Y axis label\nmarker Marker style\nlinestyle Line style\nlabel_fontsize X and Y axes label font size\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.preview_dataset!","page":"PlotPlants","title":"PlotPlants.preview_dataset!","text":"preview_dataset!(ax::PyObject, filename::String, label)\npreview_dataset!(\n            ax::PyObject,\n            filename::String,\n            label::String,\n            format::FormatNC\n)\n\nPreview dataset, given\n\nfilename Dataset file to preview\nlabel Label of the data to preview, variable name in NC files, band name in   TIFF files\nformat AbstractFormat type file format\n\n\n\n\n\n","category":"function"},{"location":"PlotPlants/#PlotPlants.AbstractFormat","page":"PlotPlants","title":"PlotPlants.AbstractFormat","text":"abstract type AbstractFormat\n\nHierachy of AbstractFormat\n\nFormatTIFF\nFormatNC\n\n\n\n\n\n","category":"type"},{"location":"PlotPlants/#PlotPlants.FormatNC","page":"PlotPlants","title":"PlotPlants.FormatNC","text":"struct FormatNC\n\n\n\n\n\n","category":"type"},{"location":"PlotPlants/#PlotPlants.FormatTIFF","page":"PlotPlants","title":"PlotPlants.FormatTIFF","text":"struct FormatTIFF\n\n\n\n\n\n","category":"type"},{"location":"#Yujie's-Julia-Utilities","page":"Home","title":"Yujie's Julia Utilities","text":"","category":"section"},{"location":"#Packages","page":"Home","title":"Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The utility packages are","category":"page"},{"location":"","page":"Home","title":"Home","text":"PkgUtility\nConstrainedRootSolvers\nNetcdfIO\nPlotPlants\nTextIO (not yet registered)","category":"page"},{"location":"ConstrainedRootSolvers/#API","page":"ConstrainedRootSolvers","title":"API","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"CurrentModule = ConstrainedRootSolvers","category":"page"},{"location":"ConstrainedRootSolvers/#Usage","page":"ConstrainedRootSolvers","title":"Usage","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"using ConstrainedRootSolvers\n\n_f_2_solve(x) = exp(-1 * (x/2)^5) - 0.5;\n\nsol = find_zero(_f_2_solve, BisectionMethod{Float64}(x_min=0, x_max=10), SolutionTolerance{Float64}(0.001))\nsol = find_zero(_f_2_solve, NewtonBisectionMethod{Float64}(0.0, 10.0, 2.0), ResidualTolerance{Float64}(0.001))\nsol = find_zero(_f_2_solve, NewtonRaphsonMethod{Float64}(2.0), ResidualTolerance{Float64}(0.001))","category":"page"},{"location":"ConstrainedRootSolvers/#Numerical-methods","page":"ConstrainedRootSolvers","title":"Numerical methods","text":"","category":"section"},{"location":"ConstrainedRootSolvers/#Find-zero","page":"ConstrainedRootSolvers","title":"Find zero","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"find_zero\nfind_zero(f::Function, ms::BisectionMethod{FT}, tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}}; stepping::Bool = false) where {FT<:AbstractFloat}\nfind_zero(f::Function, ms::NewtonBisectionMethod{FT}, tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}}; stepping::Bool = false) where {FT<:AbstractFloat}\nfind_zero(f::Function, ms::NewtonRaphsonMethod{FT}, tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}}; stepping::Bool = false) where {FT<:AbstractFloat}\nfind_zero(f::Function, ms::ReduceStepMethod{FT}, tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}}; stepping::Bool = false) where {FT<:AbstractFloat}","category":"page"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_zero","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_zero","text":"Function to find the first root that gives a target function result of zero. If     the root does not exist, the function returns the point where the target     function is most close to zero.\n\nfind_zero(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_zero.jl:40.\n\nfind_zero(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_zero.jl:144.\n\nfind_zero(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_zero.jl:258.\n\nfind_zero(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_zero.jl:322.\n\n\n\n\n\n","category":"function"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_zero-Union{Tuple{FT}, Tuple{Function, ConstrainedRootSolvers.BisectionMethod{FT}, Union{ConstrainedRootSolvers.ResidualTolerance{FT}, ConstrainedRootSolvers.SolutionTolerance{FT}}}} where FT<:AbstractFloat","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_zero","text":"This method uses BisectionMethod method:\n\nfind_zero(f::Function,\n          ms::BisectionMethod{FT},\n          tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}};\n          stepping::Bool = false\n) where {FT<:AbstractFloat}\n\nReturns the solution where target function is zero, given\n\nf Function to solve\nms BisectionMethod type method struct\ntol ResidualTolerance or SolutionTolerance type   tolerance struct\nstepping Optional. If true, save the optimization steps to the history   field in method struct.\n\n\n\n\n\n","category":"method"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_zero-Union{Tuple{FT}, Tuple{Function, ConstrainedRootSolvers.NewtonBisectionMethod{FT}, Union{ConstrainedRootSolvers.ResidualTolerance{FT}, ConstrainedRootSolvers.SolutionTolerance{FT}}}} where FT<:AbstractFloat","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_zero","text":"This method uses NewtonBisectionMethod method:\n\nfind_zero(f::Function,\n          ms::NewtonBisectionMethod{FT},\n          tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}};\n          stepping::Bool = false\n) where {FT<:AbstractFloat}\n\nReturns the solution where target function is zero, given\n\nf Function to solve\nms NewtonBisectionMethod type method struct\ntol ResidualTolerance or SolutionTolerance type   tolerance struct\nstepping Optional. If true, save the optimization steps to the history   field in method struct.\n\n\n\n\n\n","category":"method"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_zero-Union{Tuple{FT}, Tuple{Function, ConstrainedRootSolvers.NewtonRaphsonMethod{FT}, Union{ConstrainedRootSolvers.ResidualTolerance{FT}, ConstrainedRootSolvers.SolutionTolerance{FT}}}} where FT<:AbstractFloat","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_zero","text":"This method uses NewtonRaphsonMethod method:\n\nfind_zero(f::Function,\n          ms::NewtonRaphsonMethod{FT},\n          tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}};\n          stepping::Bool = false\n) where {FT<:AbstractFloat}\n\nReturns the solution where target function is zero, given\n\nf Function to solve\nms NewtonRaphsonMethod type method struct\ntol ResidualTolerance or SolutionTolerance type   tolerance struct\nstepping Optional. If true, save the optimization steps to the history   field in method struct.\n\n\n\n\n\n","category":"method"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_zero-Union{Tuple{FT}, Tuple{Function, ConstrainedRootSolvers.ReduceStepMethod{FT}, Union{ConstrainedRootSolvers.ResidualTolerance{FT}, ConstrainedRootSolvers.SolutionTolerance{FT}}}} where FT<:AbstractFloat","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_zero","text":"This method uses ReduceStepMethod method:\n\nfind_zero(f::Function,\n          ms::ReduceStepMethod{FT},\n          tol::Union{ResidualTolerance{FT}, SolutionTolerance{FT}};\n          stepping::Bool = false\n) where {FT<:AbstractFloat}\n\nReturns the solution where target function is zero, given\n\nf Function to solve\nms ReduceStepMethod type method struct\ntol ResidualTolerance or SolutionTolerance type   tolerance struct\nstepping Optional. If true, save the optimization steps to the history   field in method struct.\n\n\n\n\n\n","category":"method"},{"location":"ConstrainedRootSolvers/#Find-peak","page":"ConstrainedRootSolvers","title":"Find peak","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"find_peak","category":"page"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.find_peak","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.find_peak","text":"Function to find the first root that gives a target function result of maximum.     Note that to compute the lowest value, use -f to make it a peak.\n\nfind_peak(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_peak.jl:144.\n\nfind_peak(f, ms, tol; stepping)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/find_peak.jl:197.\n\nfind_peak(f, ms, tol)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/findpeak/neldermead.jl:6.\n\nfind_peak(f, ms, tol)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/findpeak/reducestep.jl:6.\n\nfind_peak(f, ms, tol)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/findpeak/reducestepND.jl:6.\n\n\n\n\n\n","category":"function"},{"location":"ConstrainedRootSolvers/#Method-options","page":"ConstrainedRootSolvers","title":"Method options","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"AbstractCRSMethod\nBisectionMethod\nNelderMeadMethod\nNewtonBisectionMethod\nNewtonRaphsonMethod\nReduceStepMethod\nReduceStepMethodND","category":"page"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.AbstractCRSMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.AbstractCRSMethod","text":"Abstract type of the ConstrainedRootSolvers methods\n\nabstract type AbstractCRSMethod{FT<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.BisectionMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.BisectionMethod","text":"Bisection method for 1D root solvers\n\nmutable struct BisectionMethod{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nx_min::AbstractFloat\n\n: lower bound\n\nx_max::AbstractFloat\n\n: upper bound\n\nxy::Matrix{FT} where FT<:AbstractFloat\n\n: matrix that stores x and y, used in find_peak\n\nhistory::Vector\n\n: history of all simulations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.NelderMeadMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.NelderMeadMethod","text":"Nelder-Mead method for 2D and above solvers\n\nmutable struct NelderMeadMethod{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nN::Int64\n\n: Number of parameters to optimize\n\nx_inis::Vector{FT} where FT<:AbstractFloat\n\n: Initial values\n\nsimplex::Array{Vector{FT}, 1} where FT<:AbstractFloat\n\n: Simplex vector of vector with dimension (N+1) * (N+1)\n\ncen_x::Vector{FT} where FT<:AbstractFloat\n\n: Centroid\n\nref_x::Vector{FT} where FT<:AbstractFloat\n\n: Reflection\n\nexp_x::Vector{FT} where FT<:AbstractFloat\n\n: Expansion\n\ncon_x::Vector{FT} where FT<:AbstractFloat\n\n: Contraction\n\nhistory::Array{Vector{FT}, 1} where FT<:AbstractFloat\n\n: history of all simulations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.NewtonBisectionMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.NewtonBisectionMethod","text":"Newton's method constrained by mininum and maximum ranges for 1D root solver\n\nmutable struct NewtonBisectionMethod{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nx_min::AbstractFloat\n\n: Lower bound\n\nx_max::AbstractFloat\n\n: Upper bound\n\nx_ini::AbstractFloat\n\n: Initial guess\n\nhistory::Vector\n\n: history of all simulations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.NewtonRaphsonMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.NewtonRaphsonMethod","text":"Newton raphson method for 1D root solver\n\nmutable struct NewtonRaphsonMethod{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nx_ini::AbstractFloat\n\n: Initial guess\n\nhistory::Vector\n\n: history of all simulations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.ReduceStepMethod","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.ReduceStepMethod","text":"Reduce step method for 1D root solver. This method increases or decreases from     initial guess until no improvement is found. Then the incremantal step     decreases, and then the root solver continues.\n\nmutable struct ReduceStepMethod{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nx_min::AbstractFloat\n\n: Lower bound\n\nx_max::AbstractFloat\n\n: Upper bound\n\nx_ini::AbstractFloat\n\n: Initial guess\n\nΔ_ini::AbstractFloat\n\n: Initial step\n\nhistory::Vector\n\n: history of all simulations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.ReduceStepMethodND","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.ReduceStepMethodND","text":"Reduce step method for 2D and above root solver. This method increases or     decreases each variable in the initial guess until no improvement is found.     Then the incremental steps decreases, and then the root solver continues.\n\nmutable struct ReduceStepMethodND{FT<:AbstractFloat} <: ConstrainedRootSolvers.AbstractCRSMethod{FT<:AbstractFloat}\n\nFields\n\nx_mins::Vector{FT} where FT<:AbstractFloat\n\n: Lower bound\n\nx_maxs::Vector{FT} where FT<:AbstractFloat\n\n: Upper bound\n\nx_inis::Vector{FT} where FT<:AbstractFloat\n\n: Initial guess\n\nx_targ::Vector{FT} where FT<:AbstractFloat\n\n: Target x\n\nx_temp::Vector{FT} where FT<:AbstractFloat\n\n: Temporary x\n\nΔ_inis::Vector{FT} where FT<:AbstractFloat\n\n: Initial step\n\nΔ_oper::Vector{FT} where FT<:AbstractFloat\n\n: Operation step\n\nΔjd::Vector{Bool}\n\n: Vector of judges\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#Tolerance-options","page":"ConstrainedRootSolvers","title":"Tolerance options","text":"","category":"section"},{"location":"ConstrainedRootSolvers/","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers","text":"AbstractTolerance\nResidualTolerance\nSolutionTolerance\nSolutionToleranceND\nif_break\nnext_xy!","category":"page"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.AbstractTolerance","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.AbstractTolerance","text":"Abstract tolerance type\n\nabstract type AbstractTolerance{FT}\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.ResidualTolerance","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.ResidualTolerance","text":"Tolerance for target function residual\n\nstruct ResidualTolerance{FT} <: ConstrainedRootSolvers.AbstractTolerance{FT}\n\nFields\n\ntol::Any\n\n: Tolerance for residual\n\nn_limit::Int64\n\n: limit of iterations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.SolutionTolerance","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.SolutionTolerance","text":"Tolerance for solution\n\nstruct SolutionTolerance{FT} <: ConstrainedRootSolvers.AbstractTolerance{FT}\n\nFields\n\ntol::Any\n\n: Tolerance for solution\n\nn_limit::Int64\n\n: limit of iterations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.SolutionToleranceND","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.SolutionToleranceND","text":"Tolerance for 2D and above solution\n\nstruct SolutionToleranceND{FT} <: ConstrainedRootSolvers.AbstractTolerance{FT}\n\nFields\n\ntol::Vector\n\n: Tolerance for solution\n\nn_limit::Int64\n\n: limit of iterations\n\n\n\n\n\n","category":"type"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.if_break","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.if_break","text":"Determine whether to stopping finding the solution depending on the tolerance     type.\n\nif_break(tol, x1, x2, y, n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/tolerance.jl:118.\n\nif_break(tol, x1, x2, y, n)\n\ndefined at /home/runner/work/JuliaUtilities/JuliaUtilities/packages/ConstrainedRootSolvers.jl/src/tolerance.jl:148.\n\n\n\n\n\n","category":"function"},{"location":"ConstrainedRootSolvers/#ConstrainedRootSolvers.next_xy!","page":"ConstrainedRootSolvers","title":"ConstrainedRootSolvers.next_xy!","text":"next_xy!(f::Function,\n         xy::Matrix{FT},\n         history::Vector{Vector{FT}},\n         stepping::Bool\n) where {FT<:AbstractFloat}\n\nDetermine the next points to simulate, given\n\nf Function to find peak\nxy Matrix of x (1st column) and y (2nd column)\nhistory A vector to save simulations\nstepping Optional. If true, save the optimization steps to the history   field in method struct.\n\n\n\n\n\n","category":"function"}]
}
